{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/card-set/card-set.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","cardSet","name","email","CardList","console","log","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","CardSet","cardSetValue","handleChangeType","value","App","handleSearch","e","setState","searchField","target","handleCardTypeSubmit","preventDefault","handleClick3","state","string","string2","handleClick2","handleClick1","bind","fetch","then","response","json","users","catch","error","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uWAGaA,G,MAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACP,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,oBAAsDL,EAAMM,QAA5D,mBACtB,gCAAON,EAAMI,QAAQG,KAArB,KACA,2BAAKP,EAAMI,QAAQI,UCDlBC,G,MAAW,SAAAT,GAEpB,OADAU,QAAQC,IAAIX,GACL,yBAAKC,UAAU,aAEdD,EAAMY,SAASC,KAAI,SAAAT,GAAO,OACtB,kBAAC,EAAD,CAAMU,IAAKV,EAAQC,GAAID,QAASA,EAASE,QAASN,EAAMM,gBCN3DS,G,MAAY,SAAC,GAAD,IAAIC,EAAJ,EAAIA,YAAaC,EAAjB,EAAiBA,aAAjB,OACrB,2BACIC,KAAK,SACLjB,UAAU,SACVe,YAAaA,EACbG,SAAUF,MCLLG,G,MAAU,SAAC,GAAD,IAAIC,EAAJ,EAAIA,aAAcC,EAAlB,EAAkBA,iBAAlB,OACnB,4BAAQf,KAAK,UAAUN,UAAU,SAASsB,MAAOF,EAAcF,SAAUG,GACrE,4BAAQC,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,YACA,4BAAQA,MAAM,KAAd,cACA,4BAAQA,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,aCuEOC,G,wDAzEb,aAAgB,IAAD,8BACb,gBAwBFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAON,SA1BzB,EA6BfO,qBAAuB,SAACJ,GACtBA,EAAEK,eAAeL,GACjB,IAAMG,EAASH,EAAEG,OACjB,EAAKF,SAAS,CAACrB,QAAUuB,EAAON,SAhCnB,EAwCjBS,aAAe,SAACN,GACdhB,QAAQC,IAAI,qCAtCV,EAAKsB,MAAQ,CACXC,OAAQ,MACRC,QAAS,QACTvB,SAAS,GACTgB,YAAa,GACbtB,QAAS,GAGX,EAAK8B,aAAe,EAAKC,aAAaC,KAAlB,gBAXP,E,gEAcM,IAAD,OAClBC,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAC/DA,EAASC,UACRF,MAAK,SAAAG,GAAK,OAAI,EAAKhB,SAAS,CAAEf,SAAW+B,OACzCC,OAAM,SAAAC,GAAK,OAAInC,QAAQC,IAAI,kB,qCAoBhCD,QAAQC,IAAI,oBAAsBmC,Q,+BAMzB,MAE2BA,KAAKb,MAA/BrB,EAFD,EAECA,SAAUgB,EAFX,EAEWA,YACZmB,EAAmBnC,EAASoC,QAAO,SAAA5C,GAAO,OAC5CA,EAAQG,KAAK0C,cAAcC,SAAStB,EAAYqB,kBAEpD,OACE,yBAAKhD,UAAU,OACb,kDACA,kBAAC,EAAD,CACEe,YAAY,SACZC,aAAc6B,KAAKrB,eAErB,kBAAC,EAAD,CAASJ,aAAeyB,KAAKb,MAAM3B,QAAUgB,iBAAqBwB,KAAKhB,uBACvE,6BAEA,kBAAC,EAAD,CAAUlB,SAAUmC,EAAkBzC,QAASwC,KAAKb,MAAM3B,e,GA7DhD6C,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMsB,c","file":"static/js/main.72a4c4c2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}/?set=set${props.cardSet}&size=180x180`}/>\r\n            <h2> { props.monster.name } </h2>\r\n            <p>{ props.monster.email }</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const CardList = props => {\r\n    console.log(props);\r\n    return <div className='card-list'>\r\n        {\r\n            props.monsters.map(monster => \r\n                <Card key={monster.id} monster={monster} cardSet={props.cardSet}/>\r\n            )\r\n        }\r\n    </div>;\r\n};","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\n// functional component (gets some props and returns some jsx).  No state or lifecycle methods\r\nexport const SearchBox = ( { placeholder, handleChange }) => (\r\n    <input \r\n        type='search' \r\n        className='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}/>\r\n);\r\n\r\n","import React from 'react';\r\n\r\nimport './card-set.styles.css';\r\n\r\n// functional component (gets some props and returns some jsx).  No state or lifecycle methods\r\nexport const CardSet = ( { cardSetValue, handleChangeType }) => (\r\n    <select name='cardSet' className='select' value={cardSetValue} onChange={handleChangeType}> \r\n        <option value=\"1\">Robots</option>\r\n        <option value=\"2\">Monsters</option>\r\n        <option value=\"3\">RobotHeads</option>\r\n        <option value=\"4\">Cats</option>\r\n        <option value=\"5\">People</option>\r\n    </select>\r\n);\r\n\r\n","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport {CardSet} from './components/card-set/card-set.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor () {\n    super();\n\n    this.state = {\n      string: 'kev',\n      string2: 'Kevin',\n      monsters:[],\n      searchField: '',\n      cardSet: 2\n    }\n\n    this.handleClick2 = this.handleClick1.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => \n      response.json())\n      .then(users => this.setState({ monsters : users }))\n      .catch(error => console.log('wrong URL'))\n      \n  }\n\n  // arrow functions bind 'this' automatically (lexical scoping)\n  // instead of doing 'this.handleSearch = this.handleSearch.bind(this)' in the constructor\n  // typically should used arrow functions to bind in React on any class methods that aren't already part of React\n  handleSearch = (e) => {\n    this.setState({searchField : e.target.value})\n  }\n\n  handleCardTypeSubmit = (e) => {\n    e.preventDefault(e);\n    const target = e.target;\n    this.setState({cardSet : target.value})\n    //console.log(target.value);\n  }\n\n//Simple binding exercise\nhandleClick1() {\n  console.log('button 1 clicked:' + this);\n}\nhandleClick3 = (e) => {\n  console.log('button 3 clicked:' + this);\n}\n\n  render() {\n    //destructuring (by value)\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox \n          placeholder='search' \n          handleChange={this.handleSearch}/>\n\n        <CardSet cardSetValue={ this.state.cardSet } handleChangeType = { this.handleCardTypeSubmit }/>\n        <br/>\n\n        <CardList monsters={filteredMonsters} cardSet={this.state.cardSet}/>\n{/*\n        <br/>\n        <button onClick={this.handleClick1()}>Click 1</button>\n        <button onClick={this.handleClick1}>Click 2</button>\n        <button onClick={this.handleClick2}>Click 3</button>\n        <button onClick={this.handleClick3}>Click 4</button>\n*/}\n\n      </div>\n    );  \n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}